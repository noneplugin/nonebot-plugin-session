"""alter not null

Revision ID: c18c90dc3489
Revises: 7d0575ba4608
Create Date: 2023-09-07 12:43:05.338047

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session

# revision identifiers, used by Alembic.
revision = "c18c90dc3489"
down_revision = "7d0575ba4608"
branch_labels = None
depends_on = None


def set_default() -> None:
    Base = automap_base()
    Base.prepare(autoload_with=op.get_bind())
    SessionModel = Base.classes.nonebot_plugin_session_sessionmodel

    session_model_update_set = set()
    session_model_update_list = []
    with Session(op.get_bind()) as session:
        session_models = session.scalars(sa.select(SessionModel)).all()
        for session_model in session_models:
            if session_model.id1 is None:
                session_model.id1 = ""
            if session_model.id2 is None:
                session_model.id2 = ""
            if session_model.id3 is None:
                session_model.id3 = ""

            # 尝试删除重复的 session
            session_data = (
                session_model.bot_id,
                session_model.bot_type,
                session_model.platform,
                session_model.level,
                session_model.id1,
                session_model.id2,
                session_model.id3,
            )
            if session_data in session_model_update_set:
                session.delete(session_model)
            else:
                session_model_update_set.add(session_data)
                session_model_update_list.append(session_model)

        session.add_all(session_model_update_list)
        session.commit()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    set_default()
    with op.batch_alter_table(
        "nonebot_plugin_session_sessionmodel", schema=None
    ) as batch_op:
        batch_op.alter_column(
            "id1", existing_type=sa.VARCHAR(length=64), nullable=False
        )
        batch_op.alter_column(
            "id2", existing_type=sa.VARCHAR(length=64), nullable=False
        )
        batch_op.alter_column(
            "id3", existing_type=sa.VARCHAR(length=64), nullable=False
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table(
        "nonebot_plugin_session_sessionmodel", schema=None
    ) as batch_op:
        batch_op.alter_column("id3", existing_type=sa.VARCHAR(length=64), nullable=True)
        batch_op.alter_column("id2", existing_type=sa.VARCHAR(length=64), nullable=True)
        batch_op.alter_column("id1", existing_type=sa.VARCHAR(length=64), nullable=True)

    # ### end Alembic commands ###
